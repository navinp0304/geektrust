<!-- 
   Copyright (c) 2009, 2022 Mountainminds GmbH & Co. KG and Contributors
   This program and the accompanying materials are made available under
   the terms of the Eclipse Public License 2.0 which is available at
   http://www.eclipse.org/legal/epl-2.0

   SPDX-License-Identifier: EPL-2.0

   Contributors:
      Marc R. Hoffmann - initial API and implementation
 -->
<project xmlns:jacoco="antlib:org.jacoco.ant" name="Example Ant Build with JaCoCo" default="rebuild">
	<description> Example Ant build file that demonstrates how a JaCoCo coverage report can be integrated into an existing build in three simple steps. </description>
	<property name="src.dir" location="./src/main/java" />
	<property name="test.dir" location="./src/test/java" />
	<property name="result.dir" location="./build" />
	<!-- <property name="result.classes.dir" location="${result.dir}/classes"/> -->
	<property name="result.classes.dir" location="build/main" />
	<property name="result.report.dir" location="${result.dir}/site/jacoco" />
	<property name="result.exec.file" location="${result.dir}/jacoco.exec" />
	<!--  Step 1: Import JaCoCo Ant tasks  -->
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">

		<classpath>
			<pathelement path="${classpath}" />
			<fileset dir="./coveragelib">
				<include name="**/*.jar" />
			</fileset>
		</classpath>

		<!--	
<classpath path="./coveragelib/lib/*.jar"/>
-->

	</taskdef>
	<target name="oclean">
		<delete dir="${result.dir}" />
	</target>

	<target name="ocompile">
		<mkdir dir="${result.classes.dir}" />
		<javac srcdir="${src.dir}" destdir="${result.classes.dir}" includeantruntime="false" debug="true" />
	</target>

	<target name="otest" depends="ocompile">
		<!--  Step 2: Wrap test execution with the JaCoCo coverage task  -->
		<jacoco:coverage destfile="${result.exec.file}">
			<java classname="org.jacoco.examples.parser.Main" fork="true">
				<!--
<classpath path="./coveragelib/lib/.jar"/>
-->
				<classpath>
					<pathelement path="${classpath}" />
					<fileset dir="./coveragelib">
						<include name="**/*.jar" />
					</fileset>
				</classpath>
				<classpath path="${result.classes.dir}" />
				<arg value="2 * 3 + 4" />
				<arg value="2 + 3 * 4" />
				<arg value="(2 + 3) * 4" />
				<arg value="2 * 2 * 2 * 2" />
				<arg value="1 + 2 + 3 + 4" />
				<arg value="2 * 3 + 2 * 5" />
			</java>
		</jacoco:coverage>
	</target>



	<fail message="Ant 1.10.4+ is required!">
		<condition>
			<not>
				<antversion atleast="1.10.4" />
			</not>
		</condition>
	</fail>


	<path id="test.classpath">
		<pathelement path="build/main" />
		<pathelement path="build/test" />
		<fileset dir="${ant.home}/lib" includes="*.jar" />
	</path>

	<target name="jbuild" description="clean build" depends="jclean, jtest" />

	<target name="jclean">
		<delete dir="build" />
	</target>

	<target name="jinit">
		<mkdir dir="build/main" />
		<mkdir dir="build/test" />
		<mkdir dir="build/test-report" />
	</target>

	<target name="jcompile" depends="jinit">
		<javac destdir="build/main" srcdir="src/main/java" includeantruntime="false" debug="true" />
		<javac destdir="build/test" classpathref="test.classpath" srcdir="src/test/java" includeantruntime="false" debug="true" />
	</target>

	<!-- https://junit.org/junit5/docs/snapshot/user-guide/#running-tests-build-ant -->
	<target name="test.junit.launcher" depends="jcompile">
		<junitlauncher haltOnFailure="true" printSummary="true" >
			<classpath refid="test.classpath" />
			<testclasses outputdir="build/test-report">
				<fileset dir="build/test">
					<include name="**/*Test.class" />
				</fileset>
				<listener type="legacy-xml" sendSysOut="true" sendSysErr="true" />
				<listener type="legacy-plain" sendSysOut="true" />
			</testclasses>
		</junitlauncher>
	</target>

	<!-- https://junit.org/junit5/docs/current/user-guide/#running-tests-console-launcher -->
	<target name="test.console.launcher" depends="jcompile">
		<jacoco:coverage destfile="${result.exec.file}">
			<java classpathref="test.classpath" classname="org.junit.platform.console.ConsoleLauncher" fork="true" failonerror="true">
				<arg value="--scan-classpath" />
				<arg line="--reports-dir build/test-report" />
			</java>

		</jacoco:coverage>
		<junitreport todir="build/test-report">
			<fileset dir="build/test-report">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="build/test-report/html" />
		</junitreport>
	</target>

	<target name="jtest" depends="test.junit.launcher, test.console.launcher" />


	<target name="report" depends="jtest">
		<!--  Step 3: Create coverage report  -->
		<jacoco:report>
			<!--  This task needs the collected execution data and ...  -->
			<executiondata>
				<file file="${result.exec.file}" />
			</executiondata>
			<!--  the class files and optional source files ...  -->
			<structure name="JaCoCo Ant Example">
				<classfiles>
					<fileset dir="${result.classes.dir}" />
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${src.dir}" />
				</sourcefiles>
			</structure>
			<!--  to produce reports in different formats.  -->
			<html destdir="${result.report.dir}" />
			<csv destfile="${result.report.dir}/report.csv" />
			<xml destfile="${result.report.dir}/report.xml" />
		</jacoco:report>
	</target>


	<target name="rebuild" depends="oclean,jclean,jcompile,jtest,report" />
</project>